name: Release

on:
  push:
    branches:
      - main
      - alpha
      - beta

permissions:
  contents: write # Needed to create tags and releases
  issues: write # Needed to comment on issues
  pull-requests: write # Needed to comment on PRs

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    # Skip if commit message contains [skip ci], but still run for manual releases
    if: "!contains(github.event.head_commit.message, '[skip ci]') || startsWith(github.event.head_commit.message, 'chore(release):')"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for changelog
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Check if this is a manual release
        id: check_manual
        run: |
          if [[ "${{ github.event.head_commit.message }}" == chore\(release\):* ]]; then
            echo "manual_release=true" >> $GITHUB_OUTPUT
            # Extract version from commit message (e.g., "chore(release): 0.1.0 [skip ci]")
            VERSION=$(echo "${{ github.event.head_commit.message }}" | sed -n 's/^chore(release): \([0-9.]*\).*/\1/p')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "manual_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Run semantic-release (automated)
        if: steps.check_manual.outputs.manual_release == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Create GitHub Release (manual)
        if: steps.check_manual.outputs.manual_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.check_manual.outputs.version }}"
          TAG="v$VERSION"

          # Configure git with Autobob
          git config user.name "Autobob"
          git config user.email "bob@marks.dev"

          # Create annotated tag
          git tag -a "$TAG" -m "Release $VERSION"
          git push origin "$TAG"

          # Create GitHub release from CHANGELOG.md
          if [ -f CHANGELOG.md ]; then
            # Extract release notes for this version from CHANGELOG
            NOTES=$(sed -n "/^## \[$VERSION\]/,/^## \[/p" CHANGELOG.md | sed '$ d' | tail -n +2)
            if [ -z "$NOTES" ]; then
              NOTES="Release $VERSION"
            fi
          else
            NOTES="Release $VERSION"
          fi

          # Create the release
          gh release create "$TAG" \
            --title "Release $VERSION" \
            --notes "$NOTES"
